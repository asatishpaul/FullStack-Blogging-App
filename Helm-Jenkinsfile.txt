pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        //KUBE_CONFIG = credentials('k8-cred')
        RELEASE_NAME = 'bloggingapp-release'
        CHART_DIR = 'bloggingapp/'
        NAMESPACE = 'webapps'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/asatishpaul/FullStack-Blogging-App'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Blogging-app -Dsonar.projectKey=Blogging-app -Dsonar.java.binaries=target'''
                }
            }
        }
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
        stage('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        }
        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t asatishpaul/bloggingapp:latest ."
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o image.html asatishpaul/bloggingapp:latest"
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push asatishpaul/bloggingapp:latest"
                    }
                }
            }
        }
        stage('K8s Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://49e803df1f0e78244b1685d55fc71cd0.gr7.ap-south-1.eks.amazonaws.com/') {
                    sh 'ls -al'
                    // Optional: Check kubectl and helm versions
                    sh 'kubectl version --client'
                    sh 'helm version'
                    sh 'kubectl get nodes'
                }
            }
        }
        stage('Deploy Helm Chart') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://49e803df1f0e78244b1685d55fc71cd0.gr7.ap-south-1.eks.amazonaws.com/') {
                    sh '''
                    echo "Deploying Helm chart..."
                    helm upgrade --install bloggingapp-release /var/lib/jenkins/workspace/helmchart-ci-cd/bloggingapp \
                        --namespace webapps
                    '''
                }
            }
        }
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://49e803df1f0e78244b1685d55fc71cd0.gr7.ap-south-1.eks.amazonaws.com/') {
                    sh '''
                    echo "Verifying Helm deployment..."
                    helm status bloggingapp-release --namespace webapps
                    echo "Listing Kubernetes resources..."
                    kubectl get all --namespace webapps
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        success {
            echo 'Helm chart deployed successfully!'
        }
    }
}
